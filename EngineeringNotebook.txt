scribe: Maximilian Schwenger, 11.05.2016, 10-12 session

* Tutor’s recommendation: GPS fails
* Tutor’s recommendation: Radio/Sound instead of IR -> E-Puck sound -> cartography less precise
Microphone already in E-Puck, only sound emitter needed.
Bluetooth communication between e-Pucks

Victim not on e-Puck -> use magnets instead and push them out.

hardware:
=========

2 E-Pucks, Raspberry Pi, charger missing, code transmitter
MicroUSB for Raspberry Pi

[Webcam from Ben]
Camera from chair direct connection to Pi (camera model 1)

Picamera lib for python

SD card missing in Pi! -> ask Hazem -> we’ll get it later.
At least 8 GiB for now, maybe we need less.

Discuss how we want to combine Teddy and IR emitter.  ATmega8 should suffice? -> Agreed on ATtiny2313 + 4 IR emitter
Test whether “our” IR emitter works through various kinds of paper.
Normal paper -> IR goes through (bad)
3 sheets of paper -> still (bad)
Galaxy Tab2 cardboard -> doesn’t go through (good)

Marlene agreed to prepare 2mm Cardboard for walls.

How do we connect IR sensor and E-Puck: We can remove top part of E-Puck and replace by own board. -> We need own board!

Problem: fast deployment for presentation when using E-Pucks from other groups.
Idea: Remove board, screw perfboard (Lochrasterplatine) on top including our sensors and ATmega328p, prepare 3 such boards, so we can deploy within minutes. 
Problem: 10 volts from e-Puck is way too much -> need to reduce. Resistors not sufficient because of sending, thus using Max232x chip.

Connection including battery connection -> look @ wiki
For now: 3 x e-Puck connection cable

Discussion: Using sound instead of IR: Problem with triangulation.

Solution: e-Puck allows direct connection.


==============

scribe: Ben Wiederhake, 11.05.2016, 12-13 mini-session, while looking up prices on the internet

- No 5V batteries found.  Use 4.5V instead. (Should be fine, ATtiny + IR emitter is low-power.)
- RS232 connector is difficult to find and to implement -- avoid altogether?


==============

scribe: Ben Wiederhake, 11.05.2016, 14-16 session

- koehma said "I2C solves everything", apparently including the power supply
- started the specification file (no further notes here as all things are in the spec file)


==============

scribe: Ben Wiederhake, 13.05.2016, 13-16 session

- ability to drive backwards to pick up the victim!
- Magnets
- Proximity sensors to detect whether the teddy is still there

==============

scribe: Marlene Böhmer (first 5%); Maximilian Schwenger (remaining 95%), 18.05.2016 

Communication diagram:

Components: 
- E-Puck + ATmega328p = TinBot
- Pi + Camera = LPS
- DebugServer
- Teddy + ATtiny2313 = Victim

Communication Channels:
Internal: 
- E-Puck <- ATmega328p via i^2c[WAU]
- Pi <- Camera: via USB
External: 
- Teddy -> TinBot IR[SOS]
- TinBot <-> DebugServer via Bluetooth[TBDP]
- LPS <-> TinBot via Bluetooth[LPP]
- TinBot -> Camera via light[CBP]
- TinBot <-> TinBot[T2T]

CBP  = Colored Blob Protocol
LPP  = Local Positioning Protocol
SOS  = Samsung Off Signal
TBDP = Tin Bot Debugging Protocol
WAU  = Where are you?
T2T  = TinBot to TinBot

E-Puck: Path finding, communication, map assembly, victim; considered the hardest.

Divide in groups of two to specify (i) communication protocols (MS, BW), and (ii) prepare an electronic schematic (MK,MB).

Real Time Constraints: 
- Tin Bot + IR Sensors: Sampling in predefined period of time to actually obtain the samples.
- Tin Bot + Tin Bot: Communication response in predefined period of time otherwise considered dead.

TODO:
Purge inconsistencies in spec.
Add Real Time Consistencies to spec.

MS + BW:
Considering communication protocol:
- Bluetooth uses Master-Slave Protocol.
- Can switch Master and Slave, less than 10 TinBots -> Round robin style master for broadcasting
- http://svn.gna.org/viewcvs/e-puck/trunk/program/bluetooth_mirror/
- found std lib for E-Pucks to use Bluetooth. Found reliable source stating that several Bluetooth connections via SPP are possible at the same time.

MK + MB:
- came up with electronic schematics for the victim, and the extension module for the E-Pucks
- additional components required: IRLZ 44N, 10k Ohm Resistor, additional green LED indicating the victim's status, 6-pin ISP header, and on-off switch for victim (in case the yelling wrecks our nerves). Moreover, for the E-Puck extension board: 6-pin ISP header, per TinBot 2 100 Ohm Resistors, connection cable between E-Puck and extension board (? -> ask Hazem!)

Ask Hazem about additional components for the victim.

Finished up specification document.


==============

scribe: Maximilian Köhl (first 50%), Ben Wiederhake (50%) 20.05.2016 12-16 session

- team meeting
- entry cards do not work
- have a look at parts and components
- discussing problems with the connection of our own extension module (I²C is not accessible from above)
- Ben suggested: when we found the victim, say "thank you mario but your princess is in an other castle"
    + Refused (by Ben)
- buy teddy and magnets
- ask Felix about connectors, send e-mail to Hazem with additional components
- requirement "move out" split into two requirements (more details)
- abstract first then details
- 1. July meeting -> 2 PM 29. June

TODO: be reasonably quick, i.e., try to do measurements "on the fly"
    (nonfunctional nice-to-have)
    e-mail to Hazem with additional components

Begin with the virtual prototype
- agreed to NOT use MATLAB for the first iteration of "designing"
- stages:
    + only signal detection (1 receiver)
    + add "IR environment"
    + add concept of direction(s), detect absolute direction
    + rotate in order to find out angle(s)
    + drive towards the signal
        * invariant: don't turn and drive
    + model walls
        * observation: maze is isomorphic to single wall
=> use only the last $k$ measurements
    - uses only finite memory, is easier to simulate
    - uses only finite memory, is actually realtime
=> need to experiment with the actual physical sensitivity

- use OccupancyGrid (Marlene) to model the environment:
    + http://de.mathworks.com/help/robotics/examples/path-planning-in-environments-of-different-complexity.html
    + http://de.mathworks.com/help/robotics/examples/path-following-for-a-differential-drive-robot.html
    + http://de.mathworks.com/help/robotics/examples/update-an-occupancy-grid-from-range-sensor-data.html


==============

scribe: Ben Wiederhake 23.05.2016 16-18 session

feedback regarding simulation:
- simulation NOT of pathfinding algorithm, but of "path-executing"
- rather not swap simulation software tool, but investigation is a good idea

discussing path-executing virtual-model:
- path-execution is isomorphic to single
- separate into three steps:
	* rotate to goal
	* move to goal
	* say when we're done
- assume arbitrary parameters for now, e.g.: 100 steps per 360°, 100 steps per unit length
	* TODO: measure that!
	* rotational velocity according to web: 0.00628 rad/s -- OF THE WHEELS!
- look at what data we actually send to the stepping motors:
	* seems to be the multiple of the basic stepping speed
- "Webots"nlooks like a nice simulation-y thing.  TODO: check whether we can use any of this.
- do NOT drive backwards just because it's quicker to rotate.

discussing right-hand-rule virtual-model:
- robot passes x and y position directly, for simplicity
- use half-plane for simplicity
	"x >= 5 && y <= 3"
- proximity sensors are located at: -150°, -90°, -45°, \approx -20°, \approx 20°, 45°, 90°, 150°


==============

scribe: Ben Wiederhake 25.05.2016 10-12 session

ITEM GET!  IR Emitter
(TODO: Eintragen.)

(Noch keine Hardware von Conrad gekauft, weil wir zu faul sind, und wir 
genügend Zeug eh schon zu hause haben.)

vrep:
- Simulation ist seltsam: "Dreht sich"
- C code schreiben und von Python aus aufrufen
- Simulation: Motoren einzeln ansteuern != Motoren "simultan" ansteuern = echt
- Tutor: wir sollten es in Simulink einbinden
	* Umgebung sollte in Simulink auftauchen :(

vrep integration:
- [1] C <-> Py <-> vrep <-> log <-> Matlab
	* disadvantage: Matlab doesn't *do* anything
- [2] vrep <-> Matlab <-> C
	* vrep does the simulation of environment and sensors; Matlab/C 
	  responds with the commands/actions
	  
Feedback zur Map:
- Map sind Daten aus der Sensorik
- "Darstellung als Matrix" -> Ungern
- Als Viertelebene -> findet er nicht schlecht
- ein "paar" Simulationen in vrep sind okay; hauptsache, nicht *alle*
- und noch eine Simulation zu "GPS Daten bekommen"

Use cases:
- ask LPS
- RHS (1)
- pathfinding
- IR info proc (2)
- Com T2T (3)
	* map updates
	* map vetos
	* victim info

Wir wollen also:
- Simulation per vrep
- Simulation per Quaterplane (MS & BW)
	* result: works reasonably well, but needs refinement until we're done
- Simulation zu GPS Daten
- Simulation von "IR-Winkel rausfinden" (MB & MK)
	* result: "Yup, we're progressing"

==============

scribe: Marlene Böhmer 25.05.2016 14-16 session

Distributed work:

- Marlene and Maxi work on ir_info_sim:
	* Use some sensor that is not receiving a signal to identify the 
	angle of the victim by turning and checking the start and end angle
	of the signal received by this sensor.
	* IR sensor range may not exceed 120 degrees for the simulation in
	ir_info_sim due to environment calculation.

==============

scribe: Ben Wiederhake 25.05.2016 14-16 session

right-hand rule:
- algorithm:
    + rotate until only right "Gesichtshaelfte" sees something
    + attempt invariant: 45° sensor sees something (except if too close)


==============

scribe: Maximilian Schwenger 27.05.2016 14-16 session

Discussing Maxi's work.
-> Stop simulation when colliding with wall. (TODO)
-> Problems with units of measure. Apparently, even Europeans cannot handle the metric system. (agree on dm. Discussed using 1 e-Puck as unit of area, but root-e-puck is a rather unfortunate unit of distance. TODO go over model and change!)
-> raycast simulates 80 rays to detect the victim -> more realistic
    ->-> Problem: might miss something when casting in distance of 1 deg in far distances.
-> TODO: for proximity sensor, cast three rays instead of just one.

What is left to do:
- Tin Bot:
    + One file uniting the subcomponents into a working overall TinBot model; contains wiring only, no real logic.
- LPS
- Right-Hand-Rule control logic
    + reuse differential drive
    + add logic for left-face
    + add logic to use the distance properly (?)
- Charting logic, including inner representation of map.
    + [Tin Bot + Tin Bot communication incl. veto]
- LPS blackout
- Physical model / environment 

Consensus:
Environment : Everything that is NOT connected to Tin Bot
Tin Bot (physical): Everything connected to tin bot, but NOT requiring any software
Tin Bot (software): Every logic implementing bit on the tin bot.

Right Hand Rule -> Ben + Max
    => Managed to get the path-following right
    => Fixed numerical stability in quarter plane
complete physical model -> Maxi + Marlene

Addendum by Maxi:
"ToDo: find a way to tell MatLab to treat included model as non-atomic subsystem (necessary for tin bot map introducer subsystem)"


==============

Brain dump on right-hand-rule
(Ben Wiederhake)

- seems to behave nicely in all cases with the current tolerances
  => If we need a different scale, remember to scale up both mv_per_sec and sens_tol
- tested:
    + walking flat towards edge
    + walking directly towards corner from 45° (symmetric view)
    + walking at -4° toward edge (test 'stayClose' and 'runClose' settings)
    + standing/incoming in a way so that an "unusual" sensor goes off first

================

Done (Maxi) 28.05.2016:
- implement physical TinBot model (by Marlene and Maxi)
- implement map TinBot introduction and elimination (by Marlene and Maxi)
- solve problems with non-atomic subsystems and algebraic loops by introducing own TinBot block library
- @group: MatLab needs to be tweaked before library modification

==============

scribe: Marlene Böhmer, Ben Wiederhake, Max Schwenger 30.05.2016 16-18 session

- single "Verkehrspolizist" as a StateFlow chart
	* includes path *finding* logic -> No! (Royal Veto)
	* decides "who is allowed to drive"
- all "drivers" (RHR, path execution, possibly more) must obey to this
- drivers are:
	* RHR
	* Path execution (A* "to" victim)
	* Docking the victim (in MatLab: no-op)
	* Path execution (A* "away from victim")
    * Triangulation according to sensed data
    * Reinitialize interrupted driver after restart

- Detect walking in circles while executing right-hand-rule
- We agreed on using cm as default unit

TODO: Fix names, test "run_external_code" (name might deviate)

================

Brain dump (Ben)

Done / started (Ben):
- write "controller" (the skeleton and general interface / top level view for the software)
- fix rhr-test
- get pretty annoyed by Simulink's lack-yet-abundance of proper trigger/event/message/signal mechanism (?!)
    * I probably misunderstand something here
- implement raycasting based on sin/cos
- fix constants in software/follow_right_hand.mdl (see #RHR)

Done / started (koehma):
- implement software/victim_detector.mdl -> that's the triangulation algorithm
- start software/path_finder.mdl -> that's the "A*" algorithm

Done / started (schwenger):
- implement software/Verkehrspolizist.mdl -> hopefully "just" a stateflow chart

Complete TODO list:
- implement software/ir_info_sim.slx from ../virt_model/ir_info_sim.slx
    -> I'd propose Böhmer / Köhl, since you implemented the previous version
- (maybe) create tests/test_ir_info_sim.slx for software/ir_info_sim.slx
- Include the concept of "run" signals or "reset" messages, or something like that.
  The following software models might need updating:
    * software/follow_right_hand.mdl
    * software/ir_info_sim.slx
    * software/path_finder.mdl
    * software/Verkehrspolizist.mdl
    * software/Path.slx
    * software/victim_detector.mdl
- (maybe) create tests/test_path.slx for software/path.slx

TODO list, probably-wont-happen-till-thursday:
- LPS
    * comm system
    * detect blackout
    * interpolation
- Right-Hand-Rule control logic
    + add logic to use the distance properly -> seems to be unnecessary!
    + add wrapper that detects if we're running in a circle
    + detect when left-face is stuck but right-face doesn't register anything
        * proposed state name: "stroke"
- T2T logic: Tin Bot + Tin Bot communication incl. veto
    (-> after monday's lecture, we probably don't want to use this approach anymore,
        and try an "externally-controlled" thing.)

==============

scribe: Max Schwenger 01.05.2016 14-16 session

- Ben wrapped up the IR sensor component.
- Max wrapped up Verkehrspolizist and renamed to traffic cop.
- Maxi + Marlene wrapped up path finder; position and orientation approximation.

TODO until tomorrow:
- LPS takes exact x,y coordinates, sends exact position to tin bot every 10 secs
- Recheck IR-sim.
- Create file containing all test cases/primary test case.
- Test traffic cop.



================
scribe: Maximilian Köhl 02.05.2016 01:03 AM

done:
- LPS takes exact x,y coordinates, sends exact position to tin bot every 2 secs (2 secs is better than 10)
- Recheck IR-sim.
- Create file containing all test cases/primary test case.
- Test traffic cop. (Ben)
- clean up existing tests -- some are broken, some are useless  (Maxi)
- add more internal debugging to library (maxi)
- Re-introduce XY Graph into some tests (simulation is slow, movement isn't well visible on the map viewer)

- fix, restructure and cleanup many things
- add readme file


state of the virtual prototype:
- single component tests done

todo:
- complete traffic cop and other software parts (review needed) and test the whole controller software
- prepare screencasts of the simulations (and speed them up) for the presentation on friday
- add some documentation about the various components either as text field or in the readme (03:08 AM "midnight thought")






##############################################################################
Piratepad-Dump: https://piratenpad.de/p/ZuCsUfLZOdj0ua
##############################################################################
Long-term TODO:
- Docking code (was ist docking code?)
    * which modules will be needed?
    * how does that integrate into traffic cop?

- T2T data
    * wie machen wir das in matlab, ideen? (s.u.)
    * wir benutzen dann "time-triggered", oder?  Dann bekommen wir automatisch die
       "interessanten, neuesten" Daten der anderen TinBots, und können die Messungen
       aus path_finder löschen (aber nur für die position, oder?)
       Warum nicht Position *und* selbst-gemessene Karte?
    * map aus path_finder "lesen" um es (teilweise) an T2T zu senden?
    → aber nur die eigenen Messwerte



======================

Vorschlag zum T2T (betrifft NICHT die Donnerstag-Deadline):
So wie "map_in, map_out", nur mit einem Vektor von "Nachrichten".  Jeder Tin Bot hat 'ne
ID und schreibt nur in die eigenene Stelle.  Wir können annehmen, dass Kommunikation
entweder vollständig funktioniert, oder ein Tin Bot *vollständig* ausfällt (und die Nachricht
"OFFLINE" sendet), da dieses Problem sonst ziemlich kompliziert wäre (siehe Vorlesungen
wie "Theory Of Distributed Systems", da gibt's ein paar kranke Unmöglichkeitsresultate.)

"Nachricht" wäre ein eigener Datentyp, der mindestens enthält:
    - EIGENE Messdaten, größenbeschränkt (wird dann im echten Tin Bot zeilenweise aktualisiert oder so)
      (also nicht die Historie, sondern dass, was path_finder momentan "glaubt, gemessen zu haben")
    - eigene Position
    - Winkel- und Positions-Daten über Victim (uff, das wird unschön, das sauber einzubinden!)
    - eigene Start-Position (immer, selbst wenn OFFLINE) 
##############################################################################

