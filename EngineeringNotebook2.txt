NOTE: We started a new engineering notebook because the old one became too long. The last entry in the old notebook is from 03.06.2016 09-18 "session".

scribe: Maximilian Schwenger 03.06.2016 12-14

Risk analysis:
- BW and MK divide communication to prepare conquering.
- Each communication channel is independent of the others, thus we work independently.
- Discussions about the difference between 3 and 4.
- MB and MS are sceptical about the outcome of the discussion.

Partition:
P = [{SOS, WAU},{T2T, LPP},{Pi/Camera, CBP},{internal HW-SW stuff in Tin Bot}]
Marlene.accept(P[0])
Ben.accept(P[3])
Max.accept(P[2])
Maxi.accept(P[1])

Now:
M\epsilon{K, S}: Documentation
BW + MB: Physically detecting bugs using Raid 6 with striping *Ben laughs out moderately loud in response*

TODO Ben: Traffic cop's eyes: Don't square minimal distance. (Don't try to makes sense off this sentence...)
    -> It does make sense!
    Old buggy formula for transition: current_distance >= min_distance^2
    Correct new formula (not pushed): current_distance >= min_distance
        -> It doesn't if you are unfamiliar with the concept of the traffic cop's eyes. ;)

$$$$$$$$$$$$$$
$ HAL:       $
$ $$$$       $
$            $
$ $$$$$$$$$$ $              $$
$ $ MatLab $ $               $$  $$$$$$
$ $$$$$$$$$$ $ $$$$$$$$$$$$$$$$$ $    $
$            $                   $ SW $
$ $$$$$$$$$$ $ $$$$$$$$$$$$$$$$$ $    $
$ $ E-Puck $ $  $$               $$$$$$
$ $$$$$$$$$$ $   $$
$            $
$$$$$$$$$$$$$$

You're welcome, Maxi.


==============================

Scribe: Ben Wiederhake, 8.6.2016, 10-12 session

Feedback zur Dokumentation:
- Env ist okay, aber "Components" ist was anderes:
  "Was sind Inputs, was sind Outputs, was passiert" sollte es sein
- Test-cases: zu wenig Korrelation mit Requirements
- "Falls es irgendwann noch mal eine Nachreichung gibt, einfach hochladen"
	=> Marlene und Maxi scheinen zu wissen, was damit gemeint ist
- Artikel verwenden ;)

Feedback zum Prototype:
- Sollte Verbindung testen
	-> Tut es aber!

Wahrscheinlichkeiten:
- Experimente sind nicht Zwang!
- Software sollte irgendwie Wahrscheinlichkeiten haben, "10 mal laufen lassen ist okay"

RHR alternative:
Breitenberg matrix

TODO:
- Adapt specification document, because we don't have ground sensors anymore!
- s/non physical/non-physical
- shortest known path to exit -> must have!

Anordnung vom fault tree:
- GraphViz!
- Latex-Paket ist buggy (sagt Hazem)
- Matlab-Modul ist buggy (sagt Hazem)

Aufbauen der Trees, top-down, und Aufteilen:
- escorting but no LED
- clear line of sight, no LED
- victim lost while escorting
- standing still
- incoorperative behavior (LPS)
- not using information about victim
- turning around forever
- spurious/unreasonable movements (LPS)
- run into walls
- moving to the "gathered position" instead "towards the victim"
- no power LED
- victim's LED is off
- victim cannot be found
- not moving the victim out; at least not on shortest path

Coorperation mode:
- locking via piratenpad
- working via git+graphviz

Failure mode Sackgasse:
- Es (kann) keine zweite Messung geben!
- sollte dem "Ray entlang fahren in Schlangenlinien"


==============================

scribe: Ben Wiederhake 10.06.2016 14-16 session

- writing on the fault trees
- discussion about coordination
- make sure to ask Hazem this time whether we're even remotely on
  the right track (prevent "Themaverfehlung")
- hard requirement on the victim's name:
  VICTOR CAPSLOCK  (... so he's the VICTIM VICTOR CAPSLOCK)
- new failure mode (ugh):
  When loading VICTOR while being next to a wall (and looking along
  it), we can't avoid smashing VICTOR into the wall.

Proposed specification amendments:
- victim needs to be >= 1cm away from the wall (so we don't accidentally
  pick VICTOR up while driving around on the other side)
- "wall" genauer spezifizieren:
      solvable maze (including table and walls; walls need to be of
      sufficient height to prevent signals radiating over the walls)
  zu:
      solvable maze (including table and walls; walls need to be of
      sufficient height *and thickness* to prevent signals radiating *through a wall*)


==============================

scribe: Ben Wiederhake 13.06.2016 16-18 session

- E-Puck ausprobieren
- documentation absolut fertig bekommen
- risk document rumwerkeln
- blob_detection.py optimieren und auf cython ans laufen bekommen
- Einer der E-Pucks sendet kein Bluetooth-Signal.  Könnte an der
  Batterie liegen (entladen), könnte aber auch kaputt sein.
  -> Wir laden die Batterie mal.
- "risk ananlysis" so weit bekommen, dass man es an Hazem senden kann
- E-Puck proximity Sensoren sind ziemlich beschissen.
  >5 cm: liefert den Wert 0
  ~3 cm: liefert den Wert ~30
  ~0 cm: liefert den Wert 8000
  Diese Werte ist völlig unbrauchbar
  Auf glatten Oberflächen scheint es besser zu gehen; aber der
  Wertebereich ist wirklich ungünstig.


==============================

scribe: Ben Wiederhake 15.06.2016 12-16 session

Feedback von Hazem:
- wir dürfen Sachen mit nach Hause nehmen (hurra!)
- "pick up victim through wall" genauer beschreiben
- Wir dürfen "das LPS" als zwei unabhängige Instanzen betrachten
	-> falsche Berechnung, aber deutlich einfacher

Done:
- Risk document base probabilities aufschreiben,
  und vorbereiten, es in unseren "Wald" einzubauen
- planen, wie wir das im Conrad kaufen
- im Conrad einkaufen gehen
- viele Probabilities in den Wald einbauen (noch nicht alle!)

Todo:
- ausprobieren, wie gut man RHR mit kleineren Thresholds basteln kann
  => Gut, dass wir die Herleitung der ganzen Magic Numbers aufgeschrieben haben
- Find out data retention rate for memory


==============================

scribe: Maximilian Köhl 16.06.2016 20:26 (recording progress regarding the hardware)

- E-Pucks Bluetooth module does not work without the "default extension board"
- built IR-Sensors: increased their precision by completely pasting over them with back isolation tape
- removed ground sensors and prepared E-Pucks for our custom extension board
  * need additional parts to mount the extension board on the E-Puck
- developed base idea for victim platform and built first prototype
  * use aluminum-foil to build a conductive frame out of magnets and iron globes
  * use magnets wrapped with aluminum-foil to detect contact to the platform
- determined pin assignment for the connection cable
  * green => GND
  * blue => +4V
  * white => SDA
  * black => SCL
- cut the raster boards into shape and begun soldering parts on them
- we need the following additional parts
  * Buchsen-, Stiftleisten
  * Green LEDs (3x), 100Ω Resistors (3x)
  * 100Ω Resistors (4x)
  * Victim Power Switch
  * IRLZ44n
  * some parts to hold the accumulator in place (victim)
- decided to use third E-Puck accumulator for the victim


==============================

scribe: Ben Wiederhake 17.06.2016 12-14 session

- "time-triggered", allerdings propagieren wir updates
	Eigene Messungen erst eintragen, wenn sie vom "master" zurückkommen.
- Alles in "ein" Struct werfen, und kein malloc/free
	(Ugh!  Aber ansonsten können wir nicht beweisen, dass der Speicher ausreicht)
- Maxi und Marlene gehen zum Conrad, Sachen kaufen (diesmal wirklich!)
- Ben und Max versuchen irgendwas zu programmieren
	=> LLVM als C++-to-C Converter verwenden?
	=> Allen ernstes: Ja, ansonsten
- Oder auch nicht:
	- das kann nur llvm <= 3.1 (wurde rausgeworfen nach 3.1 weil zu
	  kaputt)
	- Es scheint nur sonst noch "cfront" und "comeau" zu geben,
	  (letzteres evtl anders geschrieben), beide sehen ungut aus
	- Das github repository
	  (https://github.com/draperlaboratory/llvm-cbe) von einem Nutzer,
	  der das C-BackEnd wiederbeleben will sieht ziemlich tot aus.
- Btw, man muss installieren:
	- xc16: https://www.microchip.com/mplab/compilers
	- avr-gcc (use your favourite package manager)
- E-Puck hat einen Dreh-Schalter
	=> eigene Farbe nicht hardcoden, sondern per Drehschalten "eingeben"

MS: potential lib for A*: https://github.com/justinhj/astar-algorithm-cpp/
https://github.com/BigZaphod/AStar


==============================

scribe: Maximilian Köhl 19.06.2016 17:36 (recording progress)

- setup raspberry PI
- speed up color blob recognition by using NumPy
  * detection works most of the time
  * TODO: improve detection (compare with the original version?)
- with Marlene yesterday (18.06.2016)
  * built camera stand (+30€)
  * bought missing parts (+10€)
  * mount Raspberry PI on the stand
- wrote IR transmitter and detection software
- got I2C to work properly
  * problem with I2C and IR detection - for some reason the interrupt does not
    fire for a short period after stop signal on I2C occurred
- successfully test multiple bluetooth clients with raspberry as master
- E-Puck library is a pain in the a**, for example french comments claiming that
  some functions probably might not work (they actually do not, for whatever reason)

supplemental:
- I had a look at the receiver code of UART2 (bluetooth) — there is a 64 bytes buffer —
  if there is more information than the buffer can handle the last byte will be
  overwritten over and over again - we have to keep that in mind for protocol design

  possible alternatives (if we run into any problems):

  * increase buffer size
  * implement our own interrupt for data reception and immediately handle, e.g.,
    map updates and all other important stuff
  * use C coroutines for long computations (e.g. A*) and some sort of scheduling


==============================

scribe: Ben Wiederhake 24.06.2016 13-14 session

- A* muss nicht yield()en, kann man auch per ISR machen
- controller.h/c wäre ganz cool
- Wir sollten RHR in Matlab testen
- irgendjemand: Was genau für Pakete wollen wir eigentlich senden?


==============================

scribe: Maximilian Schwenger 28.06.2016 16-18 session

Regarding map updates:
We can only walk a finite amount in a fixed time slot (except for teleportation due to map drift and re-enabled LPS), so we have a fixed circle for which we need to transmit new information.
Information is ternary: Wall, Free, Unknown

path finder computes path -> path executor
path executer senses wall -> path invalid -> signal to controller
controller re-triggers path finder.

Note: if path finder signals a problem we run RHR again.
if path exec signals a problem we run path finder again.


==============================

scribe: Ben Wiederhake 29.06.2016 intermission

Added two new amendments to the specification as discussed on slack.


==============================

scribe: Max Schwenger 06.07.2016

Problem: Strut reflects IR-Signals, thus we need to shield/reflect in different angle, ...
Solutions so far: Tested plastic, does not work, black paper does not work either.
iPad Screens and Samsung OLED Screens do work if placed in right angle. iPad Screen works more robust. Shelfs do not pose a problem since moving the table had provided no significant improvements.


==============================

scribe: Ben Wiederhake 08.07.2016 14-16+ session

We brought some "Acrylfarben", applied it on paper, and used it on the
struts.  Doesn't work.
Peter recommends to try the following:
- black cloth (we already tried, we'll try again anyway)
- Schwarzes moosgummi
- "Valour Papier" (?)
- Papier "riffeln" und hinstellen

Problem:  we couldn't program the E-Pucks anymore, as the programming cable is defect.
Solution:  in correspondance with Peter, cut off the current adapter and pop a new one.

Problem:  well, "controller" runs now.  However, after the first
measurement it does a lot of bullshit.
Solution:  even more debugging.

Problem:  the IR stuff is really annoying and feels like Yak Shaving.
Solution:  Hazem said:  worst case, we can fall back to the Raspberry
providing some feedback (e.g. "Nope, that angle is completely wrong.")


==============================

scribe: Maximilian Schwenger 11.07.2016 16-18 session

Overview over the current progress, securing the volatile white boards' data:

On a grand scheme the software is divided into the following subcomponents:

* Controller
* Traffic Cop Eyes
* Blind Traffic Cop 
* RHR
* Victim Direction
* Victim Finder
* Path Finder
* Path Executor
* Pickup Artist

Controller:
Connects each component's inputs and outputs. 
Implementation: Done. 
Testing: On Demand. Whenever another subcomponent is finished and ready to be tested in an integration test, the respective part of the controller is tested extensively as well.

Traffic Cop Eyes:
Connects sensor data with remaining components. Issues requests for other components to start their work.
Implementation: Done.
Testing: Implicit. Successfully used in MatLab, on E-Puck tested in terms of other unit's tests.

Blind Traffic Cop:
Basically an arbiter for the subcomponents.
Implementation: Done.
Testing: Implicit. Closely related to controller, a bug becomes very obvious based on the E-Puck's reacting which is a direct result of the logic-free controller.

RHR:
Implementation of the right hand rule.
Implementation: Done. Addendum: In addition to the virtual prototype, we also cured a stroke, i.e., the faulty behavior that the E-Puck's left half was ignored.
Testing: Done. Extensive integration tests. Tin Bot ran in circles around the maze for hours straight. Problematic factor is lighting conditions. Taken path visualized in web interface.

Victim Direction:
Turns the E-Puck and computes angle/position to the victim.
Implementation: Done.
Testing: Done. In MatLab, Unit tests, as well as on the actual E-Puck. Problems: Reflecting caused by the struts. Very prone to reflections by nearby gazers or changing lighting conditions. Solution: Using cellular rubber (thanks to Peter!) to absorb rather than reflect the signal. Solution is tested in parts.

Victim Finder: 
Starts victim direction. Manages gathered data about the victim, i.e. discards old information and start computation for new data accordingly.
Implementation: Done / in debug phase. 
Testing: Unit tests done, MatLab running, on actual E-Puck unknown, assumed to be fine, though.

Path Finder: 
Computes a path from the current position to the victim based on the internal map consisting of data gathered via proximity sensors and other Tin Bot's broadcasts.
Implementation: State Machine done, search algorithm will be changed from A* to Bellman-Ford.
Testing: State Machine and A* are tested via unit tests, Bellman-Ford is about to be implemented and will be subject to appropriate unit tests. Memory overhead has been considered for both algorithms and static guarantees allow us to deem the algorithm correct in this respect. On MatLab: causes simulation to crash.

Path Executor:
Executes path given by path finder.
Implementation: done.
Testing: Untested.

Pickup Artist:
New component. Activated after path executor reports that the victim has been reached. Decides what actions to take to assure that we can pick up the victim securely and initialize the motion outwards.
Implementation: Not yet.
Testing: Untested.

Moreover, regarding communication, the data (de-)serialization is fully implemented and tested, both for communication with the LPS, and T2T.

All hardware components are built.
Communication protocols are implemented and extensively tested. Empirical tests in terms of any other E-Puck based test.
- Communication frequency: 
  + I2C: Test case lighting LEDs after a poll has been taken place.
  + Bluetooth (to LPS): LED indicates when new data has been received and processed.
  + Bluetooth (T2T): Actual communication untested.

The border has to be coated in cellular rubber, other than that, no further actions have to be applied.
