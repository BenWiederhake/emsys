digraph somegraph {
rankdir=BT;

escortNoLed[label="escorting,\nbut no LED", style="bold"];
escortNoLedOr[label="OR", shape=box];
escortNoLedOr -> escortNoLed;
    escortLedFailure[label="primary indicator LED failure"];
    escortLedFailure -> escortNoLedOr;
    //
    escortLedForgotten[label="not implemented\n(forgotten)"];
    escortLedForgotten -> escortNoLedOr;
    //
    notEscorting[label="Tin Bot is not\naware of escorting"];
    notEscorting -> escortNoLedOr;
    notEscortingOr[label="OR", shape=box];
    notEscortingOr -> notEscorting;
        memoryFault[label="forgot what happened\n(primary memory fault)"];
        memoryFault -> notEscortingOr;
        //
        unintentionalEscort[label="picking up the victim\was accidental"];
        unintentionalEscort -> notEscortingOr;
        unintentionalEscortAnd[label="AND", shape=box];
        unintentionalEscortAnd -> unintentionalEscort;
            runVictimOver[label="run into \"victim-obstacle\""];
            runVictimOver -> unintentionalEscortAnd;
            bump -> runVictimOver; // Single reason means: no boolean operator!
            //
            escortingRecognition -> unintentionalEscortAnd;
            //
            magnetsTriggerAcc[label="magnets accidentally trigger"];
            magnetsTriggerAcc -> unintentionalEscortAnd;


seeNoLed[label="clear line of sight,\nbut no LED", style="bold"];


victimLost[label="victim lost while escorting", style="bold"];
// see and use below: 'escortingRecognition'


// Not stand-alone, but used multiple times
escortingRecognition[label="escort recognition fails"];
// FIXME


standingStill[label="standing still", style="bold"];
standingStillOr[label="OR", shape=box];
standingStillOr -> standingStill;
    noInitialLps[label="no initial position from LPS"];
    noInitialLps -> standingStillOr;
    noInitialLpsOr[label="OR", shape=box];
    noInitialLpsOr -> noInitialLps;
        lpsCommunication -> noInitialLpsOr;
        //
        lpsSystemFailure -> noInitialLpsOr;
    //
    softwareInit[label="software initialization failure"];
    softwareInit -> standingStillOr;
    softwareInitOr[label="OR", shape=box];
    softwareInitOr -> softwareInit;
        softwareInitSoftware[label="software fault (bug)"];
        softwareInitSoftware -> softwareInitOr;
        //
        badFirmware[label="bad setup\n(secondary failure)", shape=diamond];
        badFirmware -> softwareInitOr;
    //
    wheelFault[label="wheels unable to turn"];
    wheelFault -> standingStillOr;
    wheelFaultOr[label="OR", shape=box];
    wheelFaultOr -> wheelFault;
        primaryMotorFault[label="primary motor fault"];
        primaryMotorFault -> wheelFaultOr;
        //
        wheelsBlocked[label="wheels blocked\n(secondary failure)", shape=diamond];
        wheelsBlocked -> wheelFaultOr;
    //
    powerFailure -> standingStillOr;


// Not stand-alone, but used multiple times
lpsCommunication[label="LPS link down"];
lpsCommunicationOr[label="OR", shape=box];
lpsCommunicationOr -> lpsCommunication;
    // FIXME


// Not stand-alone, but used multiple times
lpsSystemFailure[label="LPS sends no data"];
lpsSystemFailureOr[label="OR", shape=box];
lpsSystemFailureOr -> lpsSystemFailure;
    // FIXME


uncoorperative[label="uncoorperative behavior (T2T)", style="bold"];


ignoreVictim[label="not using information about victim", style="bold"];


spin[label="turning around forever", style="bold"];


jerk[label="spurious/unreasonable movements (LPS)", style="bold"];


bump[label="run into walls", style="bold"];


goWrong[label="moving to the \"gathered position\"\ninstead \"towards the victim\"", style="bold"];
goWrongOr[label="OR", shape=box];
goWrongOr -> goWrong;
    ignoreVictim -> goWrongOr;
    //
    jerk -> goWrongOr;
    //
    goWrongSoft[label="design error"];
    goWrongSoft -> goWrongOr;
    goWrongSoftAnd[label="AND", shape="box"];
    goWrongSoftAnd -> goWrongSoft;
        specIgnored[label="misunderstanding about MR14"];
        specIgnored -> goWrongSoftAnd;
        //
        noDoubleCheck[label="no double checking"];
        noDoubleCheck -> goWrongSoftAnd;
    //
    uncoorperative -> goWrongOr;


powerNoLed[label="no power LED", style="bold"];
  powerNoLedOr[label="OR", shape=box];
  powerNoLedOr -> powerNoLed;
    powerLedDefunct[label="primary power LED failure"];
    powerLedDefunct -> powerNoLedOr;
    //
    userDidNotTurnOn[label="secondary failure\nuser did not turn\non the E-Puck", shape=diamond];
    userDidNotTurnOn -> powerNoLedOr;
    //
    powerFailure -> powerNoLedOr;


// Not stand-alone, but used multiple times
powerFailure[label="power failure"];
powerFailureOr[label="OR", shape=box];
powerFailureOr -> powerFailure;
    batteryDefect[label="primary battery failure\nbattery defect"];
    batteryDefect -> powerFailureOr;
    //
    batteryNotCharged[label="secondary battery failure\nbattery not charged or\nbattery not connected", shape=diamond];
    batteryNotCharged -> powerFailureOr;
    //
    wiringDefect[label="failure in\nwiring or fuse"];
    wiringDefect -> powerFailureOr;


victimSilent[label="victim's LED does not\nsend valid signal", style="bold"];
  victimSilentOr[label="OR", shape=box];
  victimSilentOr -> victimSilent;
    powerFailure -> victimSilentOr;
    //
    userDidNotTurnOnVictim[label="secondary failure,\nuser did not turn\non the E-Puck", shape=diamond];
    userDidNotTurnOnVictim -> victimSilentOr;
    //
    irLedDefect[label="primary IR LED failure"];
    irLedDefect -> victimSilentOr;
    //
    victimSoftware[label="victim software failure"];
    victimSoftware -> victimSilentOr;


victim404[label="victim cannot be found", style="bold"];


noEscort[label="not moving the victim out;\nat least not on shortest path", style="bold"];
noEscort -> notEnoughMoney; // Dies ist ein Beispiel

}
